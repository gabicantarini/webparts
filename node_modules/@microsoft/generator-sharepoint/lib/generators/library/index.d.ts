import { IBaseOptions, BaseGenerator, AvailableTemplates } from '../../common/BaseGenerator';
import * as BaseComponent from '../component/BaseComponentGenerator';
export interface ILibraryOptions extends BaseComponent.IBaseComponentOptions {
}
export interface ILibraryContext extends BaseComponent.IBaseComponentContext {
}
export declare function composeWith<TOptions extends IBaseOptions, TContext extends object>(base: BaseGenerator<TOptions, TContext>, options: IBaseOptions): void;
export declare function defineOptions<TOptions extends IBaseOptions, TContext extends object>(generator: BaseGenerator<TOptions, TContext>): void;
export declare class LibraryGenerator extends BaseComponent.BaseComponentGenerator<ILibraryOptions, ILibraryContext> {
    protected readonly friendlyName: string;
    protected readonly codeName: string;
    protected readonly allowedTemplates: AvailableTemplates[];
    protected readonly folderName: string;
    initializing(): void;
    prompting(): Promise<void>;
    configuring(): void;
    writing(): void;
    install(): void;
    end(): void;
    protected constructor(args: string | string[], options: ILibraryOptions);
    private shouldExecute;
}
//# sourceMappingURL=index.d.ts.map