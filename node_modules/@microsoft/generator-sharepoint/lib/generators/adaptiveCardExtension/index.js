"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdaptiveCardExtensionGenerator = exports.defineOptions = exports.composeWith = void 0;
const path = __importStar(require("path"));
const colors_1 = __importDefault(require("colors"));
const Utils = __importStar(require("../../common/utilities"));
const BaseComponent = __importStar(require("../component/BaseComponentGenerator"));
const YeomanConfiguration_1 = require("../../common/YeomanConfiguration");
function composeWith(base, options) {
    Utils.compose(path.basename(__dirname), base, options);
}
exports.composeWith = composeWith;
function defineOptions(generator) {
    BaseComponent.defineOptions(generator, 'Adaptive Card Extension');
}
exports.defineOptions = defineOptions;
class AdaptiveCardExtensionGenerator extends BaseComponent.BaseComponentGenerator {
    constructor(args, options) {
        super(args, options);
        this.friendlyName = 'Adaptive Card Extension';
        this.codeName = 'AdaptiveCardExtension';
        this.allowedTemplates = [];
        this.folderName = 'adaptiveCardExtensions';
        defineOptions(this);
    }
    initializing() {
        /* no-op */
    }
    async prompting() {
        this.ensureCorrectFolder();
        if (!this.shouldExecute()) {
            return;
        }
        const choices = [
            {
                name: 'Basic Card Template',
                value: 'Basic'
            },
            {
                name: 'Image Card Template',
                value: 'Image'
            },
            {
                name: 'Primary Text Template',
                value: 'PrimaryText'
            }
        ];
        const answers = await this.prompt([
            {
                type: 'list',
                name: 'aceTemplateType',
                default: 'PrimaryText',
                when: () => !this.config.get('aceTemplateType'),
                message: 'Which template do you want to use?',
                choices
            }
        ]);
        const templateType = answers.aceTemplateType || this.config.get('aceTemplateType');
        if (!(templateType === 'Basic' || templateType === 'Image' || templateType === 'PrimaryText')) {
            this.log(colors_1.default.red(`Invalid template type: '${templateType}'`));
        }
        else {
            this.config.set('aceTemplateType', templateType);
        }
        return super.prompting();
    }
    configuring() {
        if (this.shouldExecute()) {
            super.configuring();
            this.ensureDependencyGroup('adaptiveCardExtension');
            const solutionName = YeomanConfiguration_1.YeomanConfiguration.libraryName;
            this.packageSolutionJson.addFeature(Utils.generateGuid(), `${solutionName} Feature`, `The feature that activates elements of the ${solutionName} solution.`, false);
            this.serveJson.setUpForWebParts();
        }
    }
    writing() {
        if (this.shouldExecute()) {
            super.writing(true);
            // copy view template
            this.copyTemplate(this._getTemplatePath(this.config.get('aceTemplateType')), this.destinationPath(`src/adaptiveCardExtensions/${this.context.componentNameCamelCase}/cardView`));
            // copy manifest.json path
            this.copyTemplate(this._getManifestTemplatePath(this.config.get('aceTemplateType')), this.destinationPath(`src/adaptiveCardExtensions/${this.context.componentNameCamelCase}`));
        }
    }
    install() {
        if (this.shouldExecute()) {
            super.install();
        }
    }
    end() {
        super.end();
    }
    shouldExecute() {
        return (this.config.get('environment') === 'spo' &&
            this.config.get('componentType') === 'adaptiveCardExtension' &&
            this.config.get('isDomainIsolated') === false);
    }
    _getTemplatePath(templateType) {
        switch (templateType) {
            case 'Image':
                return this.templatePath('./imageCardView/');
            case 'PrimaryText':
                return this.templatePath('./primaryTextCardView/');
            case 'Basic':
                return this.templatePath('./basicCardView/');
        }
    }
    _getManifestTemplatePath(templateType) {
        if (templateType === 'Image') {
            return this.templatePath('./manifestTemplate/imageTemplate');
        }
        else {
            return this.templatePath('./manifestTemplate/baseTemplate');
        }
    }
}
exports.AdaptiveCardExtensionGenerator = AdaptiveCardExtensionGenerator;
// Yeoman expects exports of this type, which overrides the TS exports above
// Ensure that anything marked as export above is also listed here
module.exports = AdaptiveCardExtensionGenerator;
module.exports.defineOptions = defineOptions;
module.exports.composeWith = composeWith;
//# sourceMappingURL=index.js.map