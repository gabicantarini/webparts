"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseExtensionGenerator = exports.defineOptions = void 0;
const path = __importStar(require("path"));
const safe_1 = __importDefault(require("colors/safe"));
const node_core_library_1 = require("@rushstack/node-core-library");
const Utils = __importStar(require("../../common/utilities"));
const BaseComponent = __importStar(require("../component/BaseComponentGenerator"));
function defineOptions(generator, type = 'Extension') {
    BaseComponent.defineOptions(generator, type);
}
exports.defineOptions = defineOptions;
class BaseExtensionGenerator extends BaseComponent.BaseComponentGenerator {
    constructor() {
        super(...arguments);
        this.folderName = 'extensions';
    }
    configuring() {
        super.configuring();
        this.ensureDependencyGroup('extension');
        this.addFeature();
    }
    writing(shouldCopy = true) {
        super.writing(shouldCopy);
        if (shouldCopy) {
            if (!this.hasElementsXml()) {
                const dest = path.join(this.destinationRoot(), 'sharepoint');
                this.copyTemplate(path.join(this.sourceRoot(), 'sharepoint'), dest);
            }
            else {
                const docsUrl = this._getFeatureFrameworkDocsUrl();
                if (docsUrl) {
                    this.log(safe_1.default.yellow(`Elements.xml already exists. Please, reference ${docsUrl} to add additional elements to it.`));
                }
            }
        }
    }
    install() {
        super.install();
    }
    addFeature() {
        if (!this.hasElementsXml()) {
            this.packageSolutionJson.addExtensionFeature(Utils.generateGuid(), this.includeClientSideInstances());
        }
    }
    hasElementsXml() {
        const elementsXmlPath = path.join(this.destinationRoot(), 'sharepoint', 'assets', 'elements.xml');
        return node_core_library_1.FileSystem.exists(elementsXmlPath);
    }
    _getFeatureFrameworkDocsUrl() {
        const extensionType = this.config.get('extensionType');
        switch (extensionType) {
            case 'FieldCustomizer':
                return 'https://aka.ms/spfx/extensions/field';
            case 'ListViewCommandSet':
                return 'https://aka.ms/spfx/extensions/cmdset';
            case 'ApplicationCustomizer':
                return 'https://aka.ms/spfx/extensions/tutorial/helloworld3';
            case 'SearchQueryModifier':
                return 'https://aka.ms/spfx/extensions/search';
            case 'FormCustomizer':
                return ''; // TODO: add form customizer docs url
            default:
                return '';
        }
    }
}
exports.BaseExtensionGenerator = BaseExtensionGenerator;
//# sourceMappingURL=BaseExtensionGenerator.js.map