"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defineOptions = exports.composeWith = void 0;
const lodash = __importStar(require("lodash"));
const path = __importStar(require("path"));
const Utils = __importStar(require("../../common/utilities"));
const BaseGenerator_1 = require("../../common/BaseGenerator");
const YeomanConfiguration_1 = require("../../common/YeomanConfiguration");
function composeWith(base, options) {
    Utils.compose(path.basename(__dirname), base, options);
}
exports.composeWith = composeWith;
function defineOptions(generator) {
    generator.option('solution-name', {
        description: 'Solution name, as well as folder name',
        type: String
    });
    generator.option('framework', {
        description: 'Framework to use. Options are: "none", "react"',
        type: String
    });
    generator.option('environment', {
        description: 'The target environment for the solution. "spo".',
        type: String
    });
    generator.option('package-manager', {
        description: 'The package manager for the solution. Options are: "npm", "pnpm", or "yarn"',
        type: String
    });
    generator.option('skip-feature-deployment', {
        description: 'If specified, allow the tenant admin the choice of being able to ' +
            'deploy the components to all sites immediately without running any ' +
            'feature deployment or adding apps in sites',
        type: Boolean
    });
    generator.option('is-domain-isolated', {
        description: 'If specified, the solution will have permissions to access web APIs ' +
            'that are unique not shared with other components in the tenant',
        type: Boolean
    });
    generator.option('use-heft', {
        description: 'If specified, the solution will build the project using Heft',
        type: Boolean
    });
}
exports.defineOptions = defineOptions;
class SolutionGenerator extends BaseGenerator_1.BaseGenerator {
    /* tslint:disable-next-line:no-any */
    constructor(args, options) {
        super(args, options);
        this.allowEmptyPackageJson = true;
        this.friendlyName = 'Solution';
        defineOptions(this);
    }
    initializing() {
        /* no-op */
    }
    async prompting() {
        if (!this.shouldExecute()) {
            return;
        }
        const answers = await this.prompt([
            {
                type: 'input',
                name: 'solutionName',
                default: lodash.kebabCase(this.appname),
                when: () => !this.config.get('solutionName'),
                message: 'What is your solution name?'
            }
        ]);
        const environment = 'spo';
        const solutionName = this.config.get('solutionName') || answers.solutionName;
        const solutionShortDescription = this.config.get('solutionShortDescription') || `${solutionName} description`;
        // allows to set --skip-feature-deployment false
        let skipFeatureDeployment = undefined;
        const skipFeatureDeploymentConfig = this.config.get('skipFeatureDeployment');
        if (skipFeatureDeploymentConfig !== undefined) {
            if (typeof skipFeatureDeploymentConfig === 'string') {
                skipFeatureDeployment = skipFeatureDeploymentConfig.toLowerCase() === 'true';
            }
            else {
                skipFeatureDeployment = skipFeatureDeploymentConfig;
            }
        }
        else {
            skipFeatureDeployment = true;
        }
        const componentType = this.config.get('componentType');
        const extensionType = this.config.get('extensionType');
        const template = this.config.get('framework') || this.config.get('template');
        const componentName = this.config.get('componentName');
        const componentDescription = this.config.get('componentDescription');
        const isCreatingSolution = this.config.get('isCreatingSolution');
        // allows to set --is-domain-isolated false
        let isDomainIsolated = undefined;
        const isDomainIsolatedConfig = this.config.get('isDomainIsolated');
        if (isDomainIsolatedConfig !== undefined) {
            if (typeof isDomainIsolatedConfig === 'string') {
                isDomainIsolated = isDomainIsolatedConfig.toLowerCase() === 'true';
            }
            else {
                isDomainIsolated = isDomainIsolatedConfig;
            }
        }
        else {
            isDomainIsolated = false;
        }
        // allows to set --use-heft false
        let useHeft = answers.useHeft;
        const useHeftConfig = this.config.get('useHeft');
        if (useHeftConfig !== undefined) {
            if (typeof useHeftConfig === 'string') {
                useHeft = useHeftConfig.toLowerCase() === 'true';
            }
            else {
                useHeft = useHeftConfig;
            }
        }
        const isPlusBeta = this.config.get('plusBeta');
        this.context.solutionName = solutionName;
        this.context.useHeft = !!useHeft;
        this.context.libraryName = lodash.kebabCase(this.context.solutionName);
        this.context.libraryId = Utils.generateGuid();
        this.context.solutionShortDescription = solutionShortDescription;
        this.context.skipFeatureDeployment = skipFeatureDeployment;
        this.context.isDomainIsolated = isDomainIsolated;
        this.context.version = BaseGenerator_1.BaseGenerator.generatorPackageJson.version;
        this.context.versionBadge = `https://img.shields.io/badge/version-${this.context.version.replace('-', '--')}-${this.context.version.indexOf('-') !== -1 ? 'yellow' : 'green'}.svg`;
        // store some variables
        YeomanConfiguration_1.YeomanConfiguration.version = BaseGenerator_1.BaseGenerator.generatorPackageJson.version;
        YeomanConfiguration_1.YeomanConfiguration.libraryName = this.context.libraryName;
        YeomanConfiguration_1.YeomanConfiguration.libraryId = this.context.libraryId;
        YeomanConfiguration_1.YeomanConfiguration.environment = environment;
        YeomanConfiguration_1.YeomanConfiguration.packageManager =
            this.config.get('packageManager') || YeomanConfiguration_1.YeomanConfiguration.packageManager || 'npm';
        YeomanConfiguration_1.YeomanConfiguration.useHeft = !!useHeft;
        this.config.set('solutionName', solutionName);
        this.config.set('useHeft', useHeft);
        this.config.set('environment', environment);
        this.config.set('solutionShortDescription', solutionShortDescription);
        this.config.set('skipFeatureDeployment', skipFeatureDeployment);
        this.config.set('componentType', componentType);
        this.config.set('extensionType', extensionType);
        this.config.set('template', template);
        this.config.set('componentName', componentName);
        this.config.set('componentDescription', componentDescription);
        this.config.set('isCreatingSolution', isCreatingSolution);
        this.config.set('isDomainIsolated', isDomainIsolated);
        this.config.set('plusBeta', isPlusBeta);
        this.packageSolutionJson.setUpSolution(this.context);
    }
    configuring() {
        if (this.shouldExecute()) {
            const packageJsonTemplate = this.context.useHeft
                ? require('./heft.package.json')
                : require('./non-heft.package.json');
            if (this.packageJsonManager.data) {
                this.log(`Overwriting an existing "package.json"`);
            }
            packageJsonTemplate.name = this.context.libraryName;
            this.packageJsonManager.set(packageJsonTemplate);
            if (this.context.useHeft) {
                this.ensureDependencyGroup('useHeft');
            }
            else {
                this.ensureDependencyGroup('useGulp');
            }
            if (this.configJson.data) {
                this.log(`Overwriting an existing "config.json"`);
            }
            this.configJson.set({
                $schema: 'https://developer.microsoft.com/json-schemas/spfx-build/config.2.0.schema.json',
                version: '2.0',
                bundles: {},
                externals: {},
                localizedResources: {}
            });
        }
    }
    writing() {
        if (this.shouldExecute()) {
            console.log();
            super.writing(false);
            const dest = this.destinationRoot();
            this.copyTemplate(path.join(this.sourceRoot(), 'base'), dest);
            if (this.context.useHeft) {
                this.copyTemplate(path.join(this.sourceRoot(), 'heft'), dest);
            }
            else {
                this.copyTemplate(path.join(this.sourceRoot(), 'gulp'), dest);
                this.copyTemplate(path.join(this.sourceRoot(), YeomanConfiguration_1.YeomanConfiguration.environment), dest);
            }
            this.packageJsonManager.save();
            this.configJson.save();
            this.packageSolutionJson.save();
        }
    }
    install() {
        if (this.shouldExecute()) {
            console.log();
            this.tryInstall();
        }
    }
    end() {
        /* no-op */
    }
    shouldExecute() {
        return this.config.get('isCreatingSolution');
    }
}
// Yeoman expects exports of this type, which overrides the TS exports above
// Ensure that anything marked as export above is also listed here
module.exports = SolutionGenerator;
module.exports.composeWith = composeWith;
module.exports.defineOptions = defineOptions;
//# sourceMappingURL=index.js.map