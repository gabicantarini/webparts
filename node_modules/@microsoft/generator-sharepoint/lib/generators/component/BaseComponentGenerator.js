"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeComponentNames = exports.BaseComponentGenerator = exports.defineOptions = void 0;
const node_core_library_1 = require("@rushstack/node-core-library");
const colors_1 = __importDefault(require("colors"));
const lodash = __importStar(require("lodash"));
const path = __importStar(require("path"));
const BaseGenerator_1 = require("../../common/BaseGenerator");
const Utils = __importStar(require("../../common/utilities"));
const YeomanConfiguration_1 = require("../../common/YeomanConfiguration");
function defineOptions(generator, type) {
    generator.option('component-description', {
        description: `${type} description`,
        type: String
    });
    generator.option('component-name', {
        description: `${type} name`,
        type: String
    });
    generator.option('framework', {
        // NOTE: 'framemowrk' name is kept for backward compatibility
        description: 'Template to use. Available: "none", "react", "minimal"',
        type: String
    });
    generator.option('plusbeta', {
        description: 'Use the beta packages',
        type: Boolean
    });
}
exports.defineOptions = defineOptions;
class BaseComponentGenerator extends BaseGenerator_1.BaseGenerator {
    constructor() {
        super(...arguments);
        this._shouldLogESLintWarning = false;
    }
    async prompting() {
        await this.checkSolution();
        const availableTemplates = [{ name: 'No framework', value: 'none' }];
        if (this.allowedTemplates.indexOf('react') !== -1) {
            availableTemplates.push({ name: 'React', value: 'react' });
        }
        if (this.allowedTemplates.indexOf('minimal') !== -1) {
            availableTemplates.unshift({ name: 'Minimal', value: 'minimal' });
        }
        const answers = await this.prompt([
            {
                type: 'input',
                name: 'componentName',
                default: 'HelloWorld',
                when: () => !this.config.get('componentName'),
                message: `What is your ${this.friendlyName} name?`,
                validate: (input) => {
                    const normalizedNamesForValidation = normalizeComponentNames(input, this.codeName);
                    const outputFolderPathForValidation = this._getOutputFolder(normalizedNamesForValidation.componentNameCamelCase);
                    if (node_core_library_1.FileSystem.exists(outputFolderPathForValidation)) {
                        console.log(colors_1.default.yellow(`\nThe folder "${outputFolderPathForValidation}" already exists.` +
                            ` Please choose a different name for your component.`));
                        return false;
                    }
                    // disallow quotes, since this will mess with the JSON we put this string into
                    if (input.indexOf('"') !== -1) {
                        console.log(colors_1.default.yellow(`\nDo not use double quotes in your title.`));
                        return false;
                    }
                    return true;
                }
                // required: true
            },
            {
                type: 'list',
                name: 'template',
                when: () => !this.config.get('framework') && !this.config.get('template') && availableTemplates.length !== 1,
                message: 'Which template would you like to use?',
                choices: availableTemplates
            }
        ]);
        const componentName = this.config.get('componentName') || answers.componentName;
        this.context.template =
            this.config.get('framework') || this.config.get('template') || answers.template || 'none';
        this.context.componentDescription =
            this.config.get('componentDescription') || `${componentName} description`;
        this.context.componentId = Utils.generateGuid();
        const normalizedNames = normalizeComponentNames(componentName, this.codeName);
        this.context.componentNameUnescaped = normalizedNames.componentNameUnescaped;
        this.context.componentName = normalizedNames.componentName;
        this.context.componentNameCamelCase = normalizedNames.componentNameCamelCase;
        this.context.componentClassName = normalizedNames.componentClassName;
        this.context.componentStrings = normalizedNames.componentStrings;
        this.context.componentClassNameKebabCase = normalizedNames.componentClassNameKebabCase;
        this.context.componentAlias = normalizedNames.componentAlias;
        this.context.eslintProfile = this.context.template === 'react' ? 'react' : 'default';
        // the folder where we will drop the information
        const outputFolderPath = this._getOutputFolder(this.context.componentNameCamelCase);
        if (node_core_library_1.FileSystem.exists(outputFolderPath)) {
            throw new Error(`The folder "${outputFolderPath}" already exists.` +
                ` Please choose a different name for your component.`);
        }
    }
    configuring(bundleEntry) {
        const templateName = this.context.template;
        if (this.nameIsDependencyGroup(templateName)) {
            this.ensureDependencyGroup(templateName);
        }
        if (!this.configJson.data) {
            throw new Error(`Missing required file: "config/config.json"`);
        }
        try {
            if (bundleEntry) {
                this.configJson.addEntry(bundleEntry, this.context.componentClassNameKebabCase);
            }
            else {
                this.configJson.addEntry({
                    components: [
                        {
                            entrypoint: `./lib/${this.folderName}/${this.context.componentNameCamelCase}/${this.context.componentClassName}.js`,
                            manifest: `./src/${this.folderName}/${this.context.componentNameCamelCase}/${this.context.componentClassName}.manifest.json`
                        }
                    ]
                }, this.context.componentClassNameKebabCase);
            }
        }
        catch (error) {
            // @todo move this error to occur during prompting
            this.log(colors_1.default.red(`Cannot create two ${this.friendlyName}s with the same name.`));
            throw error;
        }
        const localizedResourcePath = `lib/${this.folderName}/${this.context.componentNameCamelCase}/loc/{locale}.js`;
        this.configJson.addLocalizedResource(this.context.componentStrings, localizedResourcePath);
    }
    writing(shouldWrite = true) {
        super.writing(false);
        if (shouldWrite) {
            const dest = this._getOutputFolder(this.context.componentNameCamelCase);
            this.copyTemplate(path.join(this.sourceRoot(), this.context.template), dest);
            this.copyTemplate(path.join(this.sourceRoot(), 'base'), dest);
        }
        // we need to write the eslint config anyway
        this.copyTemplate(path.join(`${__dirname}/templates`, 'eslint'), this.destinationRoot());
    }
    install() {
        if (!this.tryInstall()) {
            this.log();
            this.log(`Skipping installation of dependencies. You should run "npm install"`);
        }
    }
    end() {
        if (this._shouldLogESLintWarning) {
            this.log(colors_1.default.yellow(`Found an existing ".eslintrc.js" file. Consider updating it if you are adding React component to non-React solution.`));
        }
    }
    _getOutputFolder(componentNameCamelCase) {
        return path.join(this.destinationRoot(), 'src', this.folderName, componentNameCamelCase);
    }
    async checkSolution() {
        if (this.config.get('creatingSolution')) {
            return;
        }
        const solutionName = await Utils.checkSolutionFolder(this, YeomanConfiguration_1.YeomanConfiguration.libraryName);
        this.log(`Add new ${this.friendlyName} to solution ${colors_1.default.cyan(solutionName)}.`);
    }
}
exports.BaseComponentGenerator = BaseComponentGenerator;
function normalizeComponentNames(componentNameUnescaped, componentType) {
    //  title-case:   Hello, World!     =>  HelloWorld
    const componentName = Utils.titleCase(componentNameUnescaped);
    //  camel-case:   HelloWorld        =>  helloWorld
    const componentNameCamelCase = lodash.camelCase(componentName);
    //  class-name:   HelloWorld        => HelloWorldWebPart
    const componentClassName = componentName + componentType;
    //  strings:      HelloWorldWebPart => HelloWorldWebPartStrings
    const componentStrings = componentClassName + 'Strings';
    //  kebab-case:   HelloWorldWebPart =>  hello-world-web-part
    let componentClassNameKebabCase = lodash.kebabCase(componentClassName);
    const MAX_BUNDLE_NAME_LENGTH = 64;
    if (componentClassNameKebabCase.length > MAX_BUNDLE_NAME_LENGTH) {
        componentClassNameKebabCase = componentClassNameKebabCase.substring(0, MAX_BUNDLE_NAME_LENGTH);
        //  a trailing - will also cause validation to fail
        const lastCharacterIndex = componentClassNameKebabCase.length - 1;
        if (componentClassNameKebabCase[lastCharacterIndex] === '-') {
            componentClassNameKebabCase = componentClassNameKebabCase.substring(0, lastCharacterIndex);
        }
    }
    // alias based off componentNameTitleCase, but truncate if it is too long
    let componentAlias = componentClassName;
    const MAX_ALIAS_LENGTH = 40;
    if (componentAlias.length > MAX_ALIAS_LENGTH) {
        componentAlias = componentAlias.substring(0, MAX_ALIAS_LENGTH);
    }
    return {
        componentNameUnescaped,
        componentName,
        componentNameCamelCase,
        componentClassName,
        componentStrings,
        componentClassNameKebabCase,
        componentAlias
    };
}
exports.normalizeComponentNames = normalizeComponentNames;
//# sourceMappingURL=BaseComponentGenerator.js.map