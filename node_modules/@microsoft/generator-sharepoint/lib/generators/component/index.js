"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComponentSelectorGenerator = exports.defineOptions = exports.composeWith = void 0;
const colors_1 = __importDefault(require("colors"));
const path = __importStar(require("path"));
const BaseGenerator_1 = require("../../common/BaseGenerator");
const Utils = __importStar(require("../../common/utilities"));
const Webpart = __importStar(require("../webpart"));
const Extension = __importStar(require("../extension"));
const Library = __importStar(require("../library"));
const AdaptiveCardExtension = __importStar(require("../adaptiveCardExtension"));
function composeWith(base, options) {
    Utils.compose(path.basename(__dirname), base, options);
}
exports.composeWith = composeWith;
function defineOptions(generator) {
    generator.option('component-type', {
        description: `The type of component. Currently "webpart", "extension", "library", or "adaptiveCardExtension"`,
        type: String
    });
    Webpart.defineOptions(generator);
    Extension.defineOptions(generator);
    Library.defineOptions(generator);
    AdaptiveCardExtension.defineOptions(generator);
}
exports.defineOptions = defineOptions;
/**
 * This class selects between multiple different types of components for instantiation.
 */
class ComponentSelectorGenerator extends BaseGenerator_1.BaseGenerator {
    constructor() {
        super(...arguments);
        this.friendlyName = 'Component Selection';
    }
    initializing() {
        /* no-op */
    }
    async prompting() {
        this.ensureCorrectFolder();
        if (!this.shouldExecute()) {
            return;
        }
        let choices;
        if (this.config.get('isDomainIsolated')) {
            choices = [
                {
                    name: 'WebPart',
                    value: 'webpart'
                }
            ];
        }
        else {
            choices = [
                {
                    name: 'WebPart',
                    value: 'webpart'
                },
                {
                    name: 'Extension',
                    value: 'extension'
                },
                {
                    name: 'Library',
                    value: 'library'
                },
                {
                    name: 'Adaptive Card Extension',
                    value: 'adaptiveCardExtension'
                }
            ];
        }
        const answers = await this.prompt([
            {
                type: 'list',
                name: 'componentType',
                default: 'webpart',
                when: () => !this.config.get('componentType') && !this.config.get('extensionType'),
                message: 'Which type of client-side component to create?',
                choices: choices
            }
        ]);
        const validComponentTypes = new Set(choices.map((choice) => choice.value));
        const componentType = answers.componentType || this.config.get('componentType');
        if (validComponentTypes.has(componentType)) {
            this.config.set('componentType', componentType);
        }
        else {
            this.log(colors_1.default.red(`Invalid componentType: "${componentType}"`));
            if (this.config.get('extensionType')) {
                this.log(colors_1.default.red(`Invalid extensionType: "${this.config.get('extensionType')}"`));
            }
        }
    }
    configuring() {
        /* no-op */
    }
    writing() {
        /* no-op */
    }
    install() {
        /* no-op */
    }
    end() {
        /* no-op */
    }
    shouldExecute() {
        return this.config.get('environment') === 'spo';
    }
}
exports.ComponentSelectorGenerator = ComponentSelectorGenerator;
// Yeoman expects exports of this type, which overrides the TS exports above
// Ensure that anything marked as export above is also listed here
module.exports = ComponentSelectorGenerator;
module.exports.defineOptions = defineOptions;
module.exports.composeWith = composeWith;
//# sourceMappingURL=index.js.map