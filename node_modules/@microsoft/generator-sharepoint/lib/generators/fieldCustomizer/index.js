"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FieldCustomizerGenerator = exports.defineOptions = exports.composeWith = void 0;
const path = __importStar(require("path"));
const Utils = __importStar(require("../../common/utilities"));
const BaseExtension = __importStar(require("../extension/BaseExtensionGenerator"));
function composeWith(base, options) {
    Utils.compose(path.basename(__dirname), base, options);
}
exports.composeWith = composeWith;
function defineOptions(generator) {
    BaseExtension.defineOptions(generator, 'Field Customizer');
}
exports.defineOptions = defineOptions;
class FieldCustomizerGenerator extends BaseExtension.BaseExtensionGenerator {
    constructor(args, options) {
        super(args, options);
        this.friendlyName = 'Field Customizer';
        this.codeName = 'FieldCustomizer';
        this.allowedTemplates = ['react', 'minimal'];
        defineOptions(this);
    }
    initializing() {
        /* no-op */
    }
    async prompting() {
        this.ensureCorrectFolder();
        if (this.shouldExecute()) {
            await super.prompting();
        }
    }
    configuring() {
        if (this.shouldExecute()) {
            super.configuring();
            this.ensureDependencyGroup('fieldCustomizer');
            this.context.fieldId = Utils.generateGuid();
            this.serveJson.addConfiguration(this.context.componentNameCamelCase, {
                pageUrl: 'https://{tenantDomain}/SitePages/myPage.aspx',
                fieldCustomizers: {
                    InternalFieldName: {
                        id: this.context.componentId,
                        properties: {
                            sampleText: 'Value'
                        }
                    }
                }
            });
        }
    }
    writing() {
        if (this.shouldExecute()) {
            super.writing(false);
            const dest = this._getOutputFolder(this.context.componentNameCamelCase);
            const template = this.context.template;
            this.copyTemplate(path.join(this.sourceRoot(), template), dest);
            if (template !== 'minimal') {
                this.copyTemplate(path.join(this.sourceRoot(), 'loc'), path.join(dest, 'loc'));
            }
            if (!this.hasElementsXml()) {
                this.copyTemplate(path.join(this.sourceRoot(), 'sharepoint'), path.join(this.destinationRoot(), 'sharepoint'));
            }
            this.copyTemplate(path.join(this.sourceRoot(), 'base'), dest);
        }
    }
    install() {
        if (this.shouldExecute()) {
            super.install();
        }
    }
    end() {
        super.end();
    }
    includeClientSideInstances() {
        return false;
    }
    shouldExecute() {
        return (this.config.get('environment') === 'spo' &&
            this.config.get('componentType') === 'extension' &&
            this.config.get('extensionType') === 'FieldCustomizer');
    }
}
exports.FieldCustomizerGenerator = FieldCustomizerGenerator;
// Yeoman expects exports of this type, which overrides the TS exports above
// Ensure that anything marked as export above is also listed here
module.exports = FieldCustomizerGenerator;
module.exports.defineOptions = defineOptions;
module.exports.composeWith = composeWith;
//# sourceMappingURL=index.js.map