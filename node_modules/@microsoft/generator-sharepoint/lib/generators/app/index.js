"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.composeWith = void 0;
const colors_1 = __importDefault(require("colors"));
const path = __importStar(require("path"));
const yosay = require("yosay");
const node_core_library_1 = require("@rushstack/node-core-library");
const spsay_1 = __importDefault(require("../../common/spsay"));
const BaseGenerator_1 = require("../../common/BaseGenerator");
const Utils = __importStar(require("../../common/utilities"));
const YeomanConfiguration_1 = require("../../common/YeomanConfiguration");
const Solution = __importStar(require("../solution"));
const Component = __importStar(require("../component"));
const Webpart = __importStar(require("../webpart"));
const Extension = __importStar(require("../extension"));
const Library = __importStar(require("../library"));
const AdaptiveCardExtension = __importStar(require("../adaptiveCardExtension"));
const FieldCustomizer = __importStar(require("../fieldCustomizer"));
const CommandSet = __importStar(require("../commandSet"));
const SearchQueryModifier = __importStar(require("../searchQueryModifier"));
const ApplicationCustomizer = __importStar(require("../applicationCustomizer"));
const FormCustomizer = __importStar(require("../formCustomizer"));
const VERSION = require('../../../package.json').version;
function composeWith(base, options) {
    Utils.compose(path.basename(__dirname), base, options);
}
exports.composeWith = composeWith;
/**
 * This class is the entry point when running `yo @microsoft/sharepoint`
 */
class AppGenerator extends BaseGenerator_1.BaseGenerator {
    constructor(args, options) {
        super(args, options);
        this.friendlyName = 'SharePoint Client-side Solution Generator';
        this.allowEmptyPackageJson = true;
        this.desc('Generate a SharePoint client-side solution with webparts.');
        Component.defineOptions(this);
        Solution.defineOptions(this);
    }
    initializing() {
        this.log(yosay('Welcome to the Microsoft 365 ' + colors_1.default.blue(`SPFx Yeoman Generator@${VERSION}`)));
        this._provideRetirementNote();
        this._explainArguments();
        this.context.creatingSolution = !YeomanConfiguration_1.YeomanConfiguration.libraryName;
        const shouldUseSubDir = this.options.solutionName !== undefined;
        if (shouldUseSubDir) {
            // changing destinationRoot to the subfolder
            this.destinationRoot(this.destinationPath(this.options.solutionName));
            // we need to manually update cwd to point to the subfolder as this.destinationRoot() will not do it
            this.env.cwd = this.destinationRoot();
            this.config.set('whichFolder', 'subdir');
        }
        if (this.options.solutionName !== undefined) {
            this.config.set('solutionName', this.options.solutionName);
        }
        if (this.options.solutionShortDescription !== undefined) {
            this.config.set('solutionShortDescription', this.options.solutionShortDescription);
        }
        if (this.options.environment !== undefined) {
            this.config.set('environment', this.options.environment);
        }
        if (this.options.packageManager !== undefined) {
            this.config.set('packageManager', this.options.packageManager);
        }
        if (this.options.skipFeatureDeployment !== undefined) {
            this.config.set('skipFeatureDeployment', this.options.skipFeatureDeployment);
        }
        if (this.options.isDomainIsolated !== undefined) {
            this.config.set('isDomainIsolated', this.options.isDomainIsolated);
        }
        if (this.options.useHeft !== undefined) {
            this.config.set('useHeft', this.options.useHeft);
        }
        if (this.options.componentType !== undefined) {
            this.config.set('componentType', this.options.componentType);
        }
        else {
            this.config.set('componentType', undefined);
        }
        if (this.options.extensionType !== undefined) {
            this.config.set('extensionType', this.options.extensionType);
        }
        else {
            this.config.set('extensionType', undefined);
        }
        if (this.options.aceTemplateType !== undefined) {
            this.config.set('aceTemplateType', this.options.aceTemplateType);
        }
        else {
            this.config.set('aceTemplateType', undefined);
        }
        if (this.options.framework !== undefined) {
            this.config.set('template', this.options.framework);
        }
        if (this.options.template !== undefined) {
            this.config.set('template', this.options.template);
        }
        if (this.options.componentName !== undefined) {
            this.config.set('componentName', this.options.componentName);
        }
        else {
            this.config.set('componentName', undefined);
        }
        if (this.options.componentDescription !== undefined) {
            this.config.set('componentDescription', this.options.componentDescription);
        }
        else {
            this.config.set('componentDescription', undefined);
        }
        this.config.set('plusBeta', VERSION.indexOf('beta') >= 0);
        this.config.set('isCreatingSolution', this.context.creatingSolution);
        this.config.set('nodeVersion', process.versions.node);
        this._setSDKsVersions();
        const baseOption = {
            'skip-install': this.options['skip-install'],
            plusbeta: this.options.plusbeta
        };
        this.env.options.nodePackageManager = this.options.packageManager || 'npm';
        // Config destination root before composition.
        Solution.composeWith(this, baseOption);
        Component.composeWith(this, baseOption);
        Webpart.composeWith(this, baseOption);
        Extension.composeWith(this, baseOption);
        Library.composeWith(this, baseOption);
        AdaptiveCardExtension.composeWith(this, baseOption);
        FieldCustomizer.composeWith(this, baseOption);
        CommandSet.composeWith(this, baseOption);
        SearchQueryModifier.composeWith(this, baseOption);
        ApplicationCustomizer.composeWith(this, baseOption);
        FormCustomizer.composeWith(this, baseOption);
    }
    prompting() {
        // Configure the solution root folder before other composition.
        if (this.context.creatingSolution) {
            // Create solution because not in a solution folder
            this.log(`Let's create a new Microsoft 365 solution.`);
        }
    }
    configuring() {
        /* no-op */
    }
    writing() {
        /* no-op */
    }
    install() {
        /* no-op */
    }
    end() {
        const libraryName = YeomanConfiguration_1.YeomanConfiguration.libraryName;
        const useHeft = YeomanConfiguration_1.YeomanConfiguration.useHeft;
        this.log((0, spsay_1.default)(libraryName, useHeft));
    }
    _provideRetirementNote() {
        this.log(colors_1.default.bold(`See ${colors_1.default.underline(colors_1.default.blue('https://aka.ms/spfx-yeoman-info'))} for more information on how to use this generator.`));
    }
    _explainArguments() {
        // If the CLI argument is specified, the corresponding prompting in sub-generators will be skipped.
        // The following calls do similar jobs as prompting. Place them here instead of initializing step.
        if (this.options.solutionName) {
            const solutionName = colors_1.default.cyan(this.options.solutionName);
            this.log(`A folder with solution name ${solutionName} will be created for you.`);
        }
        if (this.options.environment) {
            const environment = colors_1.default.cyan(this.options.environment);
            this.log(`A component for the ${environment} environment will be created for you.`);
        }
        if (this.options.packageManager) {
            const packageManager = colors_1.default.cyan(this.options.packageManager);
            this.log(`The ${packageManager} package manager will be used.`);
        }
        const componentType = this.options.componentType === 'webpart'
            ? 'web part'
            : this.options.componentType === 'extension'
                ? 'extension'
                : this.options.componentType === 'library'
                    ? 'library'
                    : this.options.componentType === 'adaptiveCardExtension'
                        ? 'adaptiveCardExtension'
                        : 'component';
        const componentTypeUpper = componentType.charAt(0).toUpperCase() + componentType.slice(1);
        if (this.options.componentName) {
            const webpartName = colors_1.default.cyan(this.options.componentName);
            let frameworkWords = this.options.template;
            if (!frameworkWords) {
                frameworkWords = this.options.framework;
            }
            if (frameworkWords) {
                frameworkWords = ' with ' + colors_1.default.cyan(frameworkWords) + ' framework';
            }
            else {
                frameworkWords = '';
            }
            this.log(`${componentType === 'extension' ? 'An' : 'A'} ${componentType} with the name ${webpartName}` +
                ` will be added to your solution${frameworkWords}.`);
        }
        if (this.options.componentDescription) {
            const description = colors_1.default.cyan(this.options.componentDescription);
            this.log(`${componentTypeUpper} description is going to be ${description}.`);
        }
    }
    _setSDKsVersions() {
        const bundlesFile = node_core_library_1.JsonFile.load(`${__dirname}/../../common/bundles-versions.json`);
        this.config.set('sdksVersions', bundlesFile);
    }
}
// Yeoman expects exports of this type, which overrides the TS exports above
// Ensure that anything marked as export above is also listed here
module.exports = AppGenerator;
module.exports.composeWith = composeWith;
//# sourceMappingURL=index.js.map