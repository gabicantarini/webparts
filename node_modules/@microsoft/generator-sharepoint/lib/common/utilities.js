"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.compose = exports.generateGuid = exports.checkSolutionFolder = exports.filesIn = exports.untokenize = exports.titleCase = void 0;
const colors_1 = __importDefault(require("colors"));
const fs = __importStar(require("fs"));
const lodash = __importStar(require("lodash"));
const node_core_library_1 = require("@rushstack/node-core-library");
const path = __importStar(require("path"));
const uuid = __importStar(require("uuid"));
function titleCase(str) {
    str = lodash.camelCase(str);
    return lodash.upperFirst(str);
}
exports.titleCase = titleCase;
function untokenize(str, props) {
    for (const [prop, propValue] of Object.entries(props)) {
        if (typeof propValue === 'string') {
            str = str.replace(new RegExp(`{${prop}}`, 'g'), propValue);
        }
    }
    // Convert file name prefix with '_' to '.'
    const basename = path.basename(str);
    if (basename[0] === '_') {
        const filename = '.' + basename.substr(1);
        const dirname = path.dirname(str);
        str = path.join(dirname, filename);
    }
    return str;
}
exports.untokenize = untokenize;
function filesIn(...args) {
    const inputPath = path.join.apply(undefined, args);
    const files = [];
    function traversePath(innerPath) {
        const subPaths = fs
            .readdirSync(innerPath)
            .filter((filename) => filename !== '.' && filename !== '..')
            .map((filename) => path.join(innerPath, filename));
        const subFiles = subPaths
            .filter((pathname) => fs.statSync(pathname).isFile())
            .map((pathname) => path.relative(inputPath, pathname));
        const subFolders = subPaths.filter((pathname) => fs.statSync(pathname).isDirectory());
        subFolders.forEach(traversePath);
        files.push.apply(files, subFiles);
    }
    traversePath(inputPath);
    return files;
}
exports.filesIn = filesIn;
async function checkSolutionFolder(generator, solutionName) {
    if (!solutionName) {
        generator.log(colors_1.default.red('!!! Warning !!!'));
        const answers = await generator.prompt([
            {
                type: 'confirm',
                name: 'continue',
                default: undefined,
                message: 'You are not running under solution folder. Continue?'
            }
        ]);
        if (answers.continue) {
            return solutionName; // resolve with the solution name
        }
        else {
            throw generator.log(colors_1.default.red('Bye!'));
        }
    }
    else {
        return solutionName;
    }
}
exports.checkSolutionFolder = checkSolutionFolder;
function generateGuid() {
    return uuid.v4();
}
exports.generateGuid = generateGuid;
// tslint:disable-next-line
function compose(generator, base, options) {
    base.composeWith(node_core_library_1.Import.resolveModule({
        baseFolderPath: __dirname,
        modulePath: `@microsoft/generator-sharepoint/lib/generators/${generator}`
    }), options);
}
exports.compose = compose;
//# sourceMappingURL=utilities.js.map