"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const colors_1 = __importDefault(require("colors"));
const lodash = require("lodash");
const logo = [
    '      _=+#####!       ',
    '   ###########|       ',
    '   ###/    (##|(@)    ',
    '   ###  ######|   \\   ',
    '   ###/   /###|   (@) ',
    '   #######  ##|   /   ',
    '   ###     /##|(@)    ',
    '   ###########|       ',
    '      **=+####!       '
];
function times(n, character) {
    return lodash.times(n, () => character).join('');
}
function space(n) {
    return times(n, ' ');
}
function getWords(solutionName, useHeft) {
    const words = [
        `Congratulations!`,
        `Solution ${solutionName} is created.`,
        `Run ${useHeft ? 'npm run start' : 'gulp serve'} to play with it!`
    ];
    const colorWords = [
        `Congratulations!`,
        `Solution ${colors_1.default.cyan(solutionName)} is created.`,
        `Run ${colors_1.default.yellow(useHeft ? 'npm run start' : 'gulp serve')} to play with it!`
    ];
    const maxLength = Math.max.apply(undefined, words.map((word) => word.length));
    const formatted = colorWords.map((word, index) => {
        const padding = maxLength - words[index].length;
        const rightPadding = Math.floor(padding / 2);
        const leftPadding = padding - rightPadding;
        return space(leftPadding) + word + space(rightPadding);
    });
    const wrapped = ['']
        .concat(['.' + times(maxLength + 4, '-') + '.'])
        .concat(formatted.map((word) => '|  ' + word + '  |'))
        .concat(["'" + times(maxLength + 4, '-') + "'"]);
    return wrapped;
}
function spsay(solutionName, useHeft) {
    const colorLogo = logo.map((line) => colors_1.default.cyan(line));
    const words = getWords(solutionName, useHeft);
    const lines = lodash.zip(colorLogo, words).map((parts) => parts.join(''));
    return '\n' + lines.join('\n') + '\n';
}
exports.default = spsay;
//# sourceMappingURL=spsay.js.map